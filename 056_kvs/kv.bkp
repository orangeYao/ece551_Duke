#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kv.h"

void printPair(kvpair_t* pair)
{
  printf( "key = '%s' value = '%s'\n", pair->key, pair->value);
}

void getPairs(kvpair_t **pair_p, char * c)
{
  ssize_t s = strlen(c);
  char * ptr = strchr(c, '=');
  if (ptr == NULL)
  {
    perror("no equal sign found");
    exit(EXIT_FAILURE);
  }

  *pair_p = malloc(2*sizeof(char*));
  (*pair_p)->key = malloc(ptr - c + 1);
  (*pair_p)->value = malloc(s - (ptr - c) + 1);

  *(c + s -1) = '\0'; //remove \n
  strcpy((*pair_p)->value, ptr + 1);
  *ptr = '\0';
  strcpy((*pair_p)->key, c);
  printPair(*pair_p);
}


kvarray_t * readKVs(const char * fname) {
  //WRITE ME
  FILE *f = fopen(fname, "r");
  if (f == NULL)
  {
    perror("can't open file");
    exit(EXIT_FAILURE);
  }

  char * readin = NULL;
  ssize_t s = 0;
  int i = 0;
  kvarray_t * pairs;
  pairs = malloc(sizeof(*pairs));
  pairs->length = 0;


  printf("before reading\n");
  while(getline(&readin, &s, f)>0)
  {
    pairs->length ++;
    pairs->array = realloc(pairs->array, pairs->length * sizeof(*kvpair_t));

    kvpair_t ** pair = &(pairs->array + i);

    getPairs(pair, readin);

    //printf("1. %s\n", pairs->array[i].value);
    //printf("2. %s\n", pairs->array[i].key);

    printPair(pair);
    printPair(&pairs->array[i]);
    printf("\n");
    i++;
  }
  printf("after reading\n");

  if(fclose(f) != 0)
  {
    perror("can't close file");
    exit(EXIT_FAILURE);
  }
  printKVs(pairs);
  return pairs;
}

void freeKVs(kvarray_t * pairs) {
  //WRITE ME
  for (int i=0; i<pairs->length; i++)
  {
    free(pairs->array[i].key);
    free(pairs->array[i].value);
    free(& pairs->array[i]);
  }
  free(pairs->array);
  free(pairs);
}

void printKVs(kvarray_t * pairs) {
  //WRITE ME
  printf("print %d\n", pairs->length);
  for (int i=0; i<pairs->length; i++)
  {
    printPair(& (pairs->array[i]));
  }
}

char * lookupValue(kvarray_t * pairs, const char * key) {
  //WRITE ME
}


int main()
{
  const char * ff = "test.txt";
  kvarray_t * pairs = readKVs(ff);
//  printKVs(pairs);
  freeKVs(pairs);
}
